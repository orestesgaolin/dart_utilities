name: Create Release with Changelog

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run (do not create tag/release)"
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: changelog_cli

    permissions:
      contents: write

    outputs:
      tag_name: ${{ steps.tag_check.outputs.tag_name }}
      version: ${{ steps.version_dart.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper changelog generation
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: dart pub get

      - name: Activate changelog_cli
        run: dart pub global activate --source=path .

      - name: Read version from version.dart
        id: version_dart
        run: |
          VERSION=$(grep "const packageVersion" lib/src/version.dart | sed "s/const packageVersion = '\(.*\)';/\1/")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version from version.dart: $VERSION"

      - name: Read version from pubspec.yaml
        id: version_pubspec
        run: |
          VERSION=$(grep "^version:" pubspec.yaml | sed "s/version: \(.*\)/\1/")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version from pubspec.yaml: $VERSION"

      - name: Verify versions match
        run: |
          if [ "${{ steps.version_dart.outputs.version }}" != "${{ steps.version_pubspec.outputs.version }}" ]; then
            echo "ERROR: Version mismatch!"
            echo "version.dart: ${{ steps.version_dart.outputs.version }}"
            echo "pubspec.yaml: ${{ steps.version_pubspec.outputs.version }}"
            exit 1
          fi
          echo "‚úÖ Versions match: ${{ steps.version_dart.outputs.version }}"

      - name: Get latest tag
        id: latest_tag
        run: |
          # Get the latest tag for changelog_cli
          LATEST_TAG=$(git tag -l "changelog_cli-v*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found, using initial commit"
            LATEST_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Check if tag already exists
        id: tag_check
        run: |
          TAG_NAME="changelog_cli-v${{ steps.version_dart.outputs.version }}"
          if git tag -l | grep -q "^$TAG_NAME$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚ùå Tag $TAG_NAME already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Tag $TAG_NAME does not exist"
          fi
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Fail if tag exists
        if: steps.tag_check.outputs.exists == 'true'
        run: |
          echo "ERROR: Tag ${{ steps.tag_check.outputs.tag_name }} already exists!"
          echo "Please update the version in version.dart and pubspec.yaml"
          exit 1

      - name: Generate changelog and update CHANGELOG.md
        id: changelog
        run: |
          echo "Generating changelog from ${{ steps.latest_tag.outputs.latest_tag }} to HEAD"

          # Generate changelog using changelog_cli with --output option
          # This will prepend the new changelog content to existing CHANGELOG.md
          changelog_cli generate \
            --start "${{ steps.latest_tag.outputs.latest_tag }}" \
            --end "HEAD" \
            --version "${{ steps.version_dart.outputs.version }}" \
            --output CHANGELOG.md

          # Save changelog content to temporary file for release notes
          changelog_cli generate \
            --start "${{ steps.latest_tag.outputs.latest_tag }}" \
            --end "HEAD" \
            --version "${{ steps.version_dart.outputs.version }}" \
            --output /tmp/new_changelog.md

          # Also save to output for GitHub Actions
          {
            echo 'content<<EOF'
            cat /tmp/new_changelog.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT

          echo "‚úÖ Updated CHANGELOG.md with new version ${{ steps.version_dart.outputs.version }}"

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit updated CHANGELOG.md
        run: |
          git add CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update CHANGELOG.md for v${{ steps.version_dart.outputs.version }}"
            echo "‚úÖ Committed CHANGELOG.md changes"
          fi

      - name: Push changes
        if: ${{ !inputs.dry_run }}
        run: |
          git push origin main

      - name: Create and push tag
        if: ${{ !inputs.dry_run }}
        run: |
          TAG_NAME="${{ steps.tag_check.outputs.tag_name }}"
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"
          echo "‚úÖ Created and pushed tag: $TAG_NAME"

      - name: Create GitHub Release
        if: ${{ !inputs.dry_run }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ steps.tag_check.outputs.tag_name }}"

          # Create release with changelog content
          gh release create "$TAG_NAME" \
            --title "$TAG_NAME" \
            --notes-file /tmp/new_changelog.md \
            --draft

          echo "‚úÖ Created GitHub release: $TAG_NAME"
          echo "The release is created as draft and will be updated with artifacts by the build workflow"

      - name: Dry run summary
        if: ${{ inputs.dry_run }}
        run: |
          echo "üîç DRY RUN SUMMARY:"
          echo "- Version: ${{ steps.version_dart.outputs.version }}"
          echo "- Tag that would be created: ${{ steps.tag_check.outputs.tag_name }}"
          echo "- Latest tag found: ${{ steps.latest_tag.outputs.latest_tag }}"
          echo "- CHANGELOG.md would be updated with new content"
          echo "- No actual tag or release would be created"

          echo ""
          echo "üìù Generated changelog content:"
          cat /tmp/new_changelog.md

  build_changelog_cli:
    needs: release
    if: ${{ !inputs.dry_run }}
    defaults:
      run:
        working-directory: changelog_cli
    name: Build changelog_cli
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13]
        include:
          - binary-name: changelog_cli_linux
            os: ubuntu-latest
          - binary-name: changelog_cli.exe
            os: windows-latest
          - binary-name: changelog_cli_macos
            os: macos-latest
          - binary-name: changelog_cli_macos_x86
            os: macos-13
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
      - run: dart pub get
      - run: mkdir build
      - run: mkdir build/${{ matrix.os }}
      - run: dart compile exe bin/changelog_cli.dart -o build/${{ matrix.os }}/${{ matrix.binary-name }}
      - uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.os }}
          path: changelog_cli/build/${{ matrix.os }}/${{ matrix.binary-name }}

  upload_artifacts:
    needs: [release, build_changelog_cli]
    if: ${{ !inputs.dry_run }}
    name: Upload Artifacts to GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: bin-ubuntu-latest
          path: bin-linux
      - uses: actions/download-artifact@v4
        with:
          name: bin-macos-latest
          path: bin-macos
      - uses: actions/download-artifact@v4
        with:
          name: bin-windows-latest
          path: bin-windows
      - uses: actions/download-artifact@v4
        with:
          name: bin-macos-13
          path: bin-macos-x86

      - name: Upload artifacts to existing release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release.outputs.tag_name }}
          files: bin-*/*
          draft: false # Publish the release after artifacts are uploaded
